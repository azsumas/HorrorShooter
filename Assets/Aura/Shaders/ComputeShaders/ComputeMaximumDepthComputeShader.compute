///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                                                                             ///
///     MIT License                                                                                                                                             ///
///                                                                                                                                                             ///
///     Copyright (c) 2016 Raphaël Ernaelsten (@RaphErnaelsten)                                                                                                 ///
///                                                                                                                                                             ///
///     Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),      ///
///     to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute,                  ///
///     and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:              ///
///                                                                                                                                                             ///
///     The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.                          ///
///                                                                                                                                                             ///
///     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     ///
///     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      ///
///     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS    ///
///     IN THE SOFTWARE.                                                                                                                                        ///
///                                                                                                                                                             ///
///     PLEASE CONSIDER CREDITING AURA IN YOUR PROJECTS. IF RELEVANT, USE THE UNMODIFIED LOGO PROVIDED IN THE "LICENSE" FOLDER.                                 ///
///                                                                                                                                                             ///
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../Includes/Common.cginc"

Texture2D<half> depthTexture;
RWTexture2D<half> occlusionTexture;

groupshared uint minimumDepth = 0xFFFFFFFF; //Because we're in REVERSED_Z

#pragma kernel ComputeOcclusionTexture NUM_THREADS_X=1 NUM_THREADS_Y=2
#pragma kernel ComputeOcclusionTexture NUM_THREADS_X=2 NUM_THREADS_Y=4
#pragma kernel ComputeOcclusionTexture NUM_THREADS_X=4 NUM_THREADS_Y=8
#pragma kernel ComputeOcclusionTexture NUM_THREADS_X=8 NUM_THREADS_Y=16
#pragma kernel ComputeOcclusionTexture NUM_THREADS_X=16 NUM_THREADS_Y=32

[numthreads(NUM_THREADS_X,NUM_THREADS_Y,1)]
void ComputeOcclusionTexture(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    float2 normalizedLocalPos = ((float2)dispatchThreadID.xy + float2(0.5f, 0.5f)) / bufferResolution.xy / float2(NUM_THREADS_X, NUM_THREADS_Y);
    
    uint depth = asuint(depthTexture.SampleLevel(_PointClamp, normalizedLocalPos, 0).x);
    
    GroupMemoryBarrierWithGroupSync();
    
    InterlockedMin(minimumDepth, depth); //Because we're in REVERSED_Z
    
    GroupMemoryBarrierWithGroupSync();

    if(groupThreadID.x == 0 && groupThreadID.y == 0)
    {
        float depth = InverseLerp(cameraRanges.x, cameraRanges.y, GetLinearDepth(asfloat(minimumDepth), zParameters));
		depth = GetBiasedNormalizedDepth(depth);

        occlusionTexture[groupID.xy] = depth;
    }
}